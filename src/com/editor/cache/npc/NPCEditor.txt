package com.editor.cache.npc;

import com.alex.defs.NPCDefinition;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;

public class NPCEditor extends JFrame {
    private NPCDefinition defs;
    private NPCSelection ns;
    private JTextField name, combatLevel, npcSize, npcHeight, npcWidth, walkMask, respawnDirection, renderEmote;
    private JTextField modelIds, optionsField, headIcons, modelColorField;
    private JCheckBox visibleOnMap;
    private JTextArea clientScriptOutput;

    public NPCEditor(NPCSelection ns, NPCDefinition defs) {
        this.defs = defs;
        this.ns = ns;
        this.initComponents();
        this.setResizable(false);
        this.setTitle("NPC Editor");
        this.setDefaultCloseOperation(1);
        this.setLocationRelativeTo((Component) null);
        this.setVisible(true);
    }

    private void initComponents() {
        name = new JTextField(defs.name);
        combatLevel = new JTextField(String.valueOf(defs.combatLevel));
        npcSize = new JTextField(String.valueOf(defs.size));
        visibleOnMap = new JCheckBox("Visible On Map", !defs.invisibleOnMap);
        npcHeight = new JTextField(String.valueOf(defs.npcHeight));
        npcWidth = new JTextField(String.valueOf(defs.npcWidth));
        walkMask = new JTextField(String.valueOf(defs.walkMask));
        respawnDirection = new JTextField(String.valueOf(defs.respawnDirection));
        renderEmote = new JTextField(String.valueOf(defs.renderEmote));
        modelIds = new JTextField(arrayToString(defs.modelIds));
        optionsField = new JTextField(arrayToString(defs.options));
        headIcons = new JTextField(String.valueOf(defs.headIcon));
        modelColorField = new JTextField(arrayToString(defs.originalModelColors));
        clientScriptOutput = new JTextArea();

        JButton saveButton = new JButton("Save");
        saveButton.addActionListener(this::saveButtonActionPerformed);

        JPanel panel = new JPanel(new GridLayout(12, 2));
        panel.add(new JLabel("Name:")); panel.add(name);
        panel.add(new JLabel("Combat Level:")); panel.add(combatLevel);
        panel.add(new JLabel("NPC Size:")); panel.add(npcSize);
        panel.add(visibleOnMap);
        panel.add(new JLabel("NPC Height:")); panel.add(npcHeight);
        panel.add(new JLabel("NPC Width:")); panel.add(npcWidth);
        panel.add(new JLabel("Walk Mask:")); panel.add(walkMask);
        panel.add(new JLabel("Respawn Direction:")); panel.add(respawnDirection);
        panel.add(new JLabel("Render Emote:")); panel.add(renderEmote);
        panel.add(new JLabel("Model IDs:")); panel.add(modelIds);
        panel.add(new JLabel("Options:")); panel.add(optionsField);
        panel.add(new JLabel("Head Icons:")); panel.add(headIcons);
        panel.add(new JLabel("Model Colors:")); panel.add(modelColorField);
        panel.add(new JLabel("Client Scripts:")); panel.add(new JScrollPane(clientScriptOutput));
        panel.add(saveButton);

        add(panel);
        pack();
    }

    private void saveButtonActionPerformed(ActionEvent evt) {
        try {
            defs.name = name.getText();
            defs.combatLevel = Integer.parseInt(combatLevel.getText());
            defs.size = Integer.parseInt(npcSize.getText());
            defs.invisibleOnMap = !visibleOnMap.isSelected();
            defs.npcHeight = Integer.parseInt(npcHeight.getText());
            defs.npcWidth = Integer.parseInt(npcWidth.getText());
            defs.walkMask = Byte.parseByte(walkMask.getText());
            defs.respawnDirection = Byte.parseByte(respawnDirection.getText());
            defs.renderEmote = Integer.parseInt(renderEmote.getText());
            defs.modelIds = stringToIntArray(modelIds.getText());
            defs.options = stringToArray(optionsField.getText());
            defs.headIcon = Integer.parseInt(headIcons.getText());
            defs.originalModelColors = stringToIntArray(modelColorField.getText());
            NPCSelection var10001 = this.ns;
            this.defs.write(NPCSelection.STORE);
            this.ns.updateNPCDefs(this.defs);
            JOptionPane.showMessageDialog(this, "NPC saved successfully!");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid input: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private String arrayToString(int[] array) {
        if (array == null) return "";
        StringBuilder sb = new StringBuilder();
        for (int num : array) sb.append(num).append(",");
        return sb.length() > 0 ? sb.substring(0, sb.length() - 1) : "";
    }

    private String arrayToString(String[] array) {
        if (array == null) return "";
        StringBuilder sb = new StringBuilder();
        for (String str : array) sb.append(str != null ? str : "null").append(",");
        return sb.length() > 0 ? sb.substring(0, sb.length() - 1) : "";
    }

    private int[] stringToIntArray(String text) {
        if (text.isEmpty()) return new int[0];
        String[] parts = text.split(",");
        int[] result = new int[parts.length];
        for (int i = 0; i < parts.length; i++) {
            result[i] = Integer.parseInt(parts[i].trim());
        }
        return result;
    }

    private String[] stringToArray(String text) {
        if (text.isEmpty()) return new String[0];
        return text.split(",");
    }
}
